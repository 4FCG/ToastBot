const snekfetch = require('snekfetch');
const osu = require('osu-call');
var keysave = "";

module.exports.give_key = function(key) {
  keysave = String(key);
  if (keysave.length !== 40) {
    throw "Incorrect osu-api key.";
  }
};

const urlMaker = function(vars, opts, url) {
	let prefix = "?";
		for (i = 0; i < vars.length; i++) {
			if (typeof opts[vars[i][0]] !== 'undefined') {vars[i][1] = prefix + vars[i][0] + "=" + opts[vars[i][0]]; prefix = "&";}
			url = url + vars[i][1];
		}
		return url + prefix + "k=" + keysave;
}

module.exports.get_beatmaps = function(options) {
  if (keysave !== "") {
    let create = [["since",""], ["s",""], ["b",""], ["u",""], ["type",""], ["m",""], ["a",""], ["h",""], ["limit",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_beatmaps")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.get_user = function(options) {
  if (keysave !== "") {
    if (typeof options.u === 'undefined') {throw "Required parameters are undefined.";}
    let create = [["u",""], ["type",""], ["m",""], ["event_days",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_user")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.get_scores = function(options) {
  if (keysave !== "") {
    if (typeof options.b === 'undefined') {throw "Required parameters are undefined.";}
    let create = [["b",""], ["u",""], ["type",""], ["m",""], ["mods",""], ["limit",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_scores")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.get_user_best = function(options) {
  if (keysave !== "") {
    if (typeof options.u === 'undefined') {throw "Required parameters are undefined.";}
    let create = [["u",""], ["type",""], ["m",""], ["limit",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_user_best")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.get_user_recent = function(options) {
  if (keysave !== "") {
    if (typeof options.u === 'undefined') {throw "Required parameters are undefined.";}
    let create = [["u",""], ["type",""], ["m",""], ["limit",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_user_recent")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.get_match = function(options) {
  if (keysave !== "") {
    if (typeof options.mp === 'undefined') {throw "Required parameters are undefined.";}
    let create = [["mp",""], ["undefined",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_match")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.get_replay = function(options) {
  if (keysave !== "") {
    if (typeof options.u === 'undefined' || typeof options.b === 'undefined' || typeof options.m === 'undefined') {throw "Required parameters are undefined.";}
    let create = [["u",""], ["b",""], ["m",""]];
    let packager = new Promise((resolve, reject) => {
      resolve(snekfetch.get(urlMaker(create,options,"https://osu.ppy.sh/api/get_replay")).then(result => {return result.body;}));
    });
    return packager;
  }
  else {
    throw "No osu-api key given.";
  }
}

module.exports.map_info = function(results) {
  let packer = [];
  for (let i = 0; i < results.length; i++) {
    let packet = new Promise((resolve,reject) => {
      resolve(
        osu.get_beatmaps({b: results[i].beatmap_id})
        .then(map => {
          return map;
        }));
    });
    packer.push(packet);
  }
  return Promise.all(packer)
  .then(values => {
    let packager = {};
    for (let i = 0; i < values.length; i++) {
      packager[values[i][0].beatmap_id] = values[i][0];
    }
    return packager;
  });
}
